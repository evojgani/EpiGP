lambda <- vare/varg
LHS <- rbind(cbind(crossprod(X),crossprod(X,Z)),cbind(crossprod(Z,X),crossprod(Z)+Ginv*lambda))
RHS <- rbind(crossprod(X,y),crossprod(Z,y))
MME <- MASS::ginv(LHS)%*%RHS
prediction <- MME[-1,]+MME[1,1]
return(prediction)
}
sERRBLUP <- function(pheno_training, Gall, Gtop) {
Pheno <- pheno_training[stats::complete.cases(pheno_training)]
Phenosid <- data.frame(ID = names(Pheno), observation = Pheno)
n <- dim(Gtop)[1]
Zz <- diag(n)
Xx <- matrix(1,n,ncol=1)
y <- Phenosid[,2]
ntrain <- length(y)
X <- Xx[1:ntrain]
Z <- Zz[1:ntrain,]
Ginv <- MASS::ginv(Gtop)
Gtrain <- Gall[rownames(Gall) %in% Phenosid[,1],colnames(Gall) %in% Phenosid[,1]]
abc <- EMMREML::emmreml(y=y, X=cbind(matrix(1, nrow = ntrain, ncol=1)), Z=diag(ntrain), K=Gtrain)
vare <- abc$Ve
varg <- abc$Vu
lambda <- vare/varg
LHS <- rbind(cbind(crossprod(X),crossprod(X,Z)),cbind(crossprod(Z,X),crossprod(Z)+Ginv*lambda))
RHS <- rbind(crossprod(X,y),crossprod(Z,y))
MME <- MASS::ginv(LHS)%*%RHS
prediction <- MME[-1,]+MME[1,1]
return(prediction)
}
library(BGLR)
data(wheat)
pheno <- wheat.Y[,1]
pheno_training <- pheno[1:round(4*length(pheno)/5)]
M <- MarkerRecoding(wheat.X)
rownames(M) <- names(pheno)
G_all <- Gall(M)
library(BGLR)
data(wheat)
M <- wheat.X
if(sum(c(-1,0,1) %in% M)==3){
M[M==1] <- 2
M[M==0] <- 1
M[M==-1] <- 0
}
else{
M[M==1] <- 2
M[M==0] <- 0
}
if(sum(c(-1,0,1) %in% M)==3){
M[M==1] <- 2
M[M==0] <- 1
M[M==-1] <- 0
}
else{
M[M==1] <- 2
M[M==0] <- 0
}
if(sum(c(-1,0,1) %in% M)==3){
M[M==1] <- 2
M[M==0] <- 1
M[M==-1] <- 0
}  else{
M[M==1] <- 2
M[M==0] <- 0
}
Z <- t(M)
nsnp <- nrow(Z)
nindi <- ncol(Z)
# Sequential computation of the genomic relation ship matrix
G <- matrix(0, ncol=nindi, nrow=nindi)
storage.mode(Z) = "integer"
attr(Z, "dimnames") = NULL
Z0 <- (Z==0)*2L
Z1 <- (Z==1)*2L
Z2 <- (Z==2)*2L
if(sum(Z1==0)== nsnp*nindi){
p_i <- numeric(nsnp*nsnp*4)
include <- integer(nsnp*nsnp*4)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*4)
check = prod(include)
index=1
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*4+1):((index)*nsnp*4)], ncol=nindi, nrow=nsnp*4, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
G <- G +  miraculix::relationshipMatrix(Z_miraculix, centered=TRUE, normalized=FALSE)
} else{
A <- Z_share - 2*p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)]
G <- G + crossprod(A)
}
} else {
p_i <- numeric(nsnp*nsnp*9)
include <- integer(nsnp*nsnp*9)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*9)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+4*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+5*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+6*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+7*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+8*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*9+1):((index)*nsnp*9)], ncol=nindi, nrow=nsnp*9, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*9+1):((index)*nsnp*9)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
G <- G +  miraculix::relationshipMatrix(Z_miraculix, centered=TRUE, normalized=FALSE)
} else{
A <- Z_share - 2*p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)]
G <- G + crossprod(A)
}
}
G_all <- G / (2 * sum(p_i*(1-p_i)))
rownames(G_all) <- rownames(M)
colnames(G_all) <- rownames(M)
}
pheno <- wheat.Y[,1]
pheno_training <- pheno[1:round(4*length(pheno)/5)]
M <- MarkerRecoding(wheat.X)
rownames(M) <- names(pheno)
G_all <- Gall(M)
Gall_training <- G_all[rownames(G_all) %in% names(pheno_training), colnames(G_all) %in% names(pheno_training)]
M <- M[rownames(M) %in% names(pheno_training), ] # names(y_real)=Genotype
Z <- t(M)
names(pheno_training) <- NULL
y_real  <- pheno_training[stats::complete.cases(pheno_training)] # the trait
y <- y_real
nsnp <- nrow(Z)
nindi <- ncol(Z)
# rrBLUP
R <- diag(nindi)
multi <- y - mean(y)
abc <- EMMREML::emmreml(y, X=cbind(matrix(rep(1, nindi), ncol=1)), Z=diag(nindi), K=Gall_training)
vare <- abc$Ve
varg <- abc$Vu
Rest_term <- (chol2inv(chol(Gall_training + R *vare / varg)) %*% multi)
Z0 <- (Z==0)*2L
Z1 <- (Z==1)*2L
Z2 <- (Z==2)*2L
if(sum(Z1==0)== nsnp*nindi){
u_hat <- numeric(nsnp*nsnp*4)
p_i <- numeric(nsnp*nsnp*4)
include <- integer(nsnp*nsnp*4)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*4)
check = prod(include)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*4+1):((index)*nsnp*4)], ncol=nindi, nrow=nsnp*4, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
else {
u_hat <- numeric(nsnp*nsnp*9)
p_i <- numeric(nsnp*nsnp*9)
include <- integer(nsnp*nsnp*9)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*9)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z0 <- (Z==0)*2L
Z1 <- (Z==1)*2L
Z2 <- (Z==2)*2L
if(sum(Z1==0)== nsnp*nindi){
u_hat <- numeric(nsnp*nsnp*4)
p_i <- numeric(nsnp*nsnp*4)
include <- integer(nsnp*nsnp*4)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*4)
check = prod(include)
# for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*4+1):((index)*nsnp*4)], ncol=nindi, nrow=nsnp*4, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
#}
} else {
u_hat <- numeric(nsnp*nsnp*9)
p_i <- numeric(nsnp*nsnp*9)
include <- integer(nsnp*nsnp*9)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*9)
check = prod(include)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+4*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+5*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+6*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+7*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+8*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*9+1):((index)*nsnp*9)], ncol=nindi, nrow=nsnp*9, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*9+1):((index)*nsnp*9)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
if(sum(Z1==0)== nsnp*nindi){
u_hat <- numeric(nsnp*nsnp*4)
p_i <- numeric(nsnp*nsnp*4)
include <- integer(nsnp*nsnp*4)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*4)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*4+1):((index)*nsnp*4)], ncol=nindi, nrow=nsnp*4, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
}
} else {
u_hat <- numeric(nsnp*nsnp*9)
p_i <- numeric(nsnp*nsnp*9)
include <- integer(nsnp*nsnp*9)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*9)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+4*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+5*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+6*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+7*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+8*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*9+1):((index)*nsnp*9)], ncol=nindi, nrow=nsnp*9, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*9+1):((index)*nsnp*9)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
}
}
u_hat <- u_hat  * 1/ 2 / sum(p_i*(1-p_i))
}
}
SNPeffect <- function(M, pheno_training, Gall_training){
M <- M[rownames(M) %in% names(pheno_training), ] # names(y_real)=Genotype
Z <- t(M)
names(pheno_training) <- NULL
y_real  <- pheno_training[stats::complete.cases(pheno_training)] # the trait
y <- y_real
nsnp <- nrow(Z)
nindi <- ncol(Z)
# rrBLUP
R <- diag(nindi)
multi <- y - mean(y)
abc <- EMMREML::emmreml(y, X=cbind(matrix(rep(1, nindi), ncol=1)), Z=diag(nindi), K=Gall_training)
vare <- abc$Ve
varg <- abc$Vu
Rest_term <- (chol2inv(chol(Gall_training + R *vare / varg)) %*% multi)
# this is cheating since i am assuming the heritability to be known but will not cost a lot of computation time
Z0 <- (Z==0)*2L
Z1 <- (Z==1)*2L
Z2 <- (Z==2)*2L
if(sum(Z1==0)== nsnp*nindi){
u_hat <- numeric(nsnp*nsnp*4)
p_i <- numeric(nsnp*nsnp*4)
include <- integer(nsnp*nsnp*4)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*4)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*4+1):((index)*nsnp*4)], ncol=nindi, nrow=nsnp*4, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
}
} else {
u_hat <- numeric(nsnp*nsnp*9)
p_i <- numeric(nsnp*nsnp*9)
include <- integer(nsnp*nsnp*9)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*9)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+4*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+5*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+6*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+7*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+8*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*9+1):((index)*nsnp*9)], ncol=nindi, nrow=nsnp*9, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*9+1):((index)*nsnp*9)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
}
}
u_hat <- u_hat  * 1/ 2 / sum(p_i*(1-p_i))
return(u_hat)
}
u_hat <- SNPeffect(M, pheno_training, Gall_training)
abc <- EMMREML::emmreml(y, X=cbind(matrix(rep(1, nindi), ncol=1)), Z=diag(nindi), K=Gall_training)
vare <- abc$Ve
varg <- abc$Vu
abc <- EMMREML::emmreml(y, X=cbind(matrix(rep(1, nindi), ncol=1)), Z=diag(nindi), K=Gall_training)
vare <- abc$Ve
varg <- abc$Vu
SNPeffect <- function(M, pheno_training, Gall_training){
M <- M[rownames(M) %in% names(pheno_training), ] # names(y_real)=Genotype
Z <- t(M)
names(pheno_training) <- NULL
y_real  <- pheno_training[stats::complete.cases(pheno_training)] # the trait
y <- y_real
nsnp <- nrow(Z)
nindi <- ncol(Z)
# rrBLUP
R <- diag(nindi)
multi <- y - mean(y)
abc <- EMMREML::emmreml(y, X=cbind(matrix(rep(1, nindi), ncol=1)), Z=diag(nindi), K=Gall_training)
vare <- abc$Ve
varg <- abc$Vu
Rest_term <- (chol2inv(chol(Gall_training + R *vare / varg)) %*% multi)
# this is cheating since i am assuming the heritability to be known but will not cost a lot of computation time
Z0 <- (Z==0)*2L
Z1 <- (Z==1)*2L
Z2 <- (Z==2)*2L
if(sum(Z1==0)== nsnp*nindi){
u_hat <- numeric(nsnp*nsnp*4)
p_i <- numeric(nsnp*nsnp*4)
include <- integer(nsnp*nsnp*4)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*4)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*4+1):((index)*nsnp*4)], ncol=nindi, nrow=nsnp*4, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
}
} else {
u_hat <- numeric(nsnp*nsnp*9)
p_i <- numeric(nsnp*nsnp*9)
include <- integer(nsnp*nsnp*9)+1L
Z_share = matrix(0L, ncol=nindi, nrow=nsnp*9)
check = prod(include)
for(index in 1:nsnp){
if(index %% 1000 == 0)print(index)
Z_share[1:nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+2*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+3*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+4*nsnp,] <- matrix(Z[index,]==0, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+5*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z0
Z_share[1:nsnp+6*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
Z_share[1:nsnp+7*nsnp,] <- matrix(Z[index,]==1, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z2
Z_share[1:nsnp+8*nsnp,] <- matrix(Z[index,]==2, ncol=nindi, nrow=nsnp, byrow=TRUE) * Z1
if(check!=1){
Z_share <- matrix(include[((index-1)*nsnp*9+1):((index)*nsnp*9)], ncol=nindi, nrow=nsnp*9, byrow=TRUE) * Z_share
}
p_i[((index-1)*nsnp*9+1):((index)*nsnp*9)] <- rowSums(Z_share)/ncol(Z_share)/2
if (requireNamespace("miraculix", quietly = TRUE)) {
Z_miraculix <- miraculix::genomicmatrix(Z_share)
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- miraculix::genoVector(Z_miraculix, Rest_term)
} else{
p <- matrix(c(rep(p_i[((index-1)*nsnp*4+1):((index)*nsnp*4)], nindi)), ncol = nindi, byrow = FALSE)
A <- Z_share - 2*p
u_hat[((index-1)*nsnp*4+1):((index)*nsnp*4)] <- A %*% Rest_term
}
}
}
u_hat <- u_hat  * 1/ 2 / sum(p_i*(1-p_i))
return(u_hat)
}
Gall_training <- G_all[rownames(G_all) %in% names(pheno_training), colnames(G_all) %in% names(pheno_training)]
u_hat <- SNPeffect(M, pheno_training, Gall_training)
install.packages(c("backports", "BiocManager", "callr", "car", "circlize", "covr", "curl", "data.table", "devtools", "digest", "ellipsis", "ggpubr", "GlobalOptions", "htmltools", "KernSmooth", "knitr", "magick", "maptools", "mgcv", "pkgbuild", "pkgconfig", "pkgdown", "purrr", "Rcpp", "RcppArmadillo", "rlang", "rmarkdown", "styler", "testthat", "tidyr", "tinytex", "xfun", "zip"))
library(EGP)
library(EGP)
library(EGP)
?sERRBLUP
?ERRBLUP
library(EGP)
library(EGP)
library(EGP)
?Gtop
library(EGP)
library(EGP)
?relationshipMatrix()
?genomicmatrix()
library(EGP)
library(BGLR)
data(wheat)
M <- wheat.X
Recodemarker <- function(M){
m <- M
if(sum(c(-1,0,1) %in% M)==3){
m[m==1] <- 2
m[m==0] <- 1
m[m==-1] <- 0
}  else{
m[m==1] <- 2
m[m==0] <- 0
}
output <- m
return(output)
}
Recodemarker(wheat.X)
Recodemarker <- function(M){
m <- M
if(sum(c(-1,0,1) %in% M)==3){
m[m==1] <- 2
m[m==0] <- 1
m[m==-1] <- 0
}  else{
m[m==1] <- 2
m[m==0] <- 0
}
output <- list(m)
return(output)
}
Recodemarker(wheat.X)
library(EGP)
library(EGP)
changer(C:/Users/Elaheh/Documents/MAZEGP, EpiGP, check_validity = TRUE, change_git = TRUE,
run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
changer("C:/Users/Elaheh/Documents/MAZEGP", EpiGP, check_validity = TRUE, change_git = TRUE,
run_roxygen = FALSE, remote_name = NULL, ask = TRUE)
